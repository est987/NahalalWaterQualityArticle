#look at it
ggplot(data,
aes(hy_year,anual_max_discharge , color = ranks))+
geom_point()
N <- length(data$hy_year)
a <- 0.44
library(raster)
library(terrainr)
# Load the terrain data
terrain <- raster('terrain.tif')
# Load the terrain data
terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/terrain.tif')
# Load the terrain data
terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif')
neighborhood_size <- 3
# Calculate TPI using the terrainr package
tpi <- terrainr::tpi(terrain, neighborhood_size)
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
library(raster)
library(terrainr)
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
install.packages("spatialEco")
library(raster)
library(spatialEco)
# Load the terrain data
terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif')
# Define the neighborhood size for TPI calculation
neighborhood_size <- 3
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif'")
library(terra)
library(terra)
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif'")
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif")
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
# Save the TPI raster to disk
writeRaster(tpi,'C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/tpi_3_R.tif', overwrite=TRUE)
library(raster)
library(spatialEco)
library(terra)
# Load the terrain data
#terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif')
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif")
# Define the neighborhood size for TPI calculation
neighborhood_size <- 10
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
# Load the terrain data
#terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif')
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif")
# Define the neighborhood size for TPI calculation
neighborhood_size <- 10
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
# Define the neighborhood size for TPI calculation
neighborhood_size <- 11
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
# Save the TPI raster to disk
writeRaster(tpi,'C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/tpi_10_R.tif', overwrite=TRUE)
# Load the terrain data
#terrain <- raster('C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif')
terrain<- rast("C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/DEM.tif")
# Define the neighborhood size for TPI calculation
neighborhood_size <- 31
# Calculate TPI using the terrainr package
tpi <-tpi(terrain, neighborhood_size)
# Save the TPI raster to disk
writeRaster(tpi,'C:/Users/matanb/OneDrive - ARO Volcani Center/Basic concepts in drainage planning/starem/AL/TPI_index/tpi_31_R.tif', overwrite=TRUE)
library(quantreg)
library(quantreg)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
a=data$discharge
b=boxplot(a)
names(data)
model <- rq(TSS_mgl ~ discharge, data = dataset, tau = 0.5)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.5)
model
s=summary(model)
s
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.4)
s=summary(model)
s
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.5)
s=summary(model)
plot(TSS_mgl ~ discharge, data = mtcars, pch = 16, main = "mpg ~ wt")
plot(TSS_mgl ~ discharge, data = data, pch = 16, main = "mpg ~ wt")
abline(lm(TSS_mgl ~ discharge, data = data), col = "red", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data), col = "blue", lty = 2)
legend("topright", legend = c("lm", "rq"), col = c("red", "blue"), lty = 2)
plot(TSS_mgl ~ discharge, data = data, pch = 16, main = "mpg ~ wt")
abline(lm(TSS_mgl ~ discharge, data = data), col = "red", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.1), col = "blue", lty = 2)
legend("topright", legend = c("lm", "rq"), col = c("red", "blue"), lty = 2)
plot(TSS_mgl ~ discharge, data = data, pch = 16, main = "mpg ~ wt")
abline(lm(TSS_mgl ~ discharge, data = data), col = "red", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.1), col = "blue", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.9), col = "grin", lty = 2)
plot(TSS_mgl ~ discharge, data = data, pch = 16, main = "mpg ~ wt")
abline(lm(TSS_mgl ~ discharge, data = data), col = "red", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.1), col = "blue", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.9), col = "green", lty = 2)
legend("topright", legend = c("lm", "rq0.1","rq0.9"), col = c("red", "blue","green"), lty = 2)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(TSS_mgl ~ discharge, data = data), col = "red", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.1), col = "blue", lty = 2)
abline(rq(TSS_mgl ~ discharge, data = data, tau = 0.9), col = "green", lty = 2)
legend("topright", legend = c("lm", "rq0.1","rq0.9"), col = c("red", "blue","green"), lty = 2)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 2)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 2)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.9), col = "green", lty = 2)
legend("topright", legend = c("lm", "rq0.1","rq0.9"), col = c("red", "blue","green"), lty = 2)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 2)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 2)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.9), col = "green", lty = 2)
#lege
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.9), col = "green", lty = 4)
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
multi_rqfit
summary(multi_rqfit )
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
colors <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333",
"#ff0000", "#cc0000", "#b30000", "#800000", "#4d0000", "#000000")
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
for (j in 1:ncol(multi_rqfit$coefficients)) {
abline(coef(multi_rqfit)[, j], col = colors[j])
}
plot(multi_rqfit)
plot(model)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
plot(model)
library(readxl)
library(ggplot2)
library(dplyr)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
a=data$discharge
b=boxplot(a)
names(data)
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
s=summary(model)
s
P=predict(model)
p
p
p=predict(model)
p
p=as.data.frame(predict(model))
View(p)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.9), col = "green", lty = 4)
s=summary(model)
s=summary(multi_rqfit)
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
plot(multi_rqfit)
s=summary(multi_rqfit)
p=as.data.frame(predict(model))
View(p)
multi_rqfit
p=as.data.frame(predict(multi_rqfit))
View(p)
View(p)
X = seq(min(data$logtss), max(data$logtss), length.out=4)
x
X
p=as.data.frame(predict(multi_rqfit),newdata=data.frame(X))
View(p)
p=as.data.frame(predict(multi_rqfit),newdata=data.frame(X))
p2=as.data.frame(predict(multi_rqfit))
View(p)
View(p2)
X = seq(min(data$logtss), max(data$logtss), length.out=4)
pred=as.data.frame(predict(multi_rqfit),newdata=data.frame(X))
pred$X = X
X = seq(min(data$logtss), max(data$logtss), length.out=4)
pred=as.data.frame(predict(multi_rqfit),newdata=data.frame(X))
pred$X = X
tau = seq(0, 1, by = 0.1)
tau
length(tau)
X = seq(min(data$logtss), max(data$logtss), length.out=11)
pred=as.data.frame(predict(multi_rqfit),newdata=data.frame(X))
pred$X = X
library(cdfquantreg)
install.packages("cdfquantreg")
library(quantreg)
library(cdfquantreg)
library(quantreg)
library(cdfquantreg)
data(cdfqrExampleData)
force(JurorData)
force(IPCC_Wide)
View(JurorData)
View(JurorData)
fit <- cdfquantreg(crc99 ~ vert | confl, fd ='t2',sd ='t2', data = JurorData)
summary(fit)
dit
fit
#Examples
library(quantreg)
library(cdfquantreg)
data(cdfqrExampleData)
fit <- cdfquantreg(crc99 ~ vert | confl, fd ='t2',sd ='t2', data = JurorData)
summary(fit)
########################################################
library(readxl)
library(ggplot2)
library(dplyr)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
a=data$discharge
b=boxplot(a)
names(data)
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
########################################################
library(readxl)
library(ggplot2)
library(dplyr)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
a=data$discharge
b=boxplot(a)
names(data)
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
a=data$discharge
b=boxplot(a)
names(data)
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
#Examples
library(quantreg)
library(cdfquantreg)
library(quantreg)
model <- rq(TSS_mgl ~ discharge, data = data , tau = 0.1)
library(quantreg)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 4)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 4)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
model <- rq(TSS_mgl ~ discharge,tau = 0.1, data = data)
library(quantreg)
library(cdfquantreg)
data(cdfqrExampleData)
fit <- cdfquantreg(crc99 ~ vert | confl, fd ='t2',sd ='t2', data = JurorData)
summary(fit)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
library(quantreg)
model <- rq(TSS_mgl ~ discharge,tau = 0.1, data = data)
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
rq
library(readxl)
library(ggplot2)
library(dplyr)
data = read.table("C:/Users/matanb/OneDrive - ARO Volcani Center/TSS/Tasks/all_tss_data.csv", sep = ",", header = T)
library(quantreg)
model <- rq(TSS_mgl ~ discharge,tau = 0.1, data = data)
s=summary(model)
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
abline(lm(log(TSS_mgl) ~ log(discharge), data = data), col = "red", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.1), col = "blue", lty = 4)
abline(rq(log(TSS_mgl) ~ log(discharge), data = data, tau = 0.9), col = "green", lty = 4)
multi_rqfit <-rq(log(TSS_mgl) ~ log(discharge), data = data, tau = seq(0, 1, by = 0.1))
plot(multi_rqfit)
colors <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333",
"#ff0000", "#cc0000", "#b30000", "#800000", "#4d0000", "#000000")
plot(log(TSS_mgl) ~ log(discharge), data = data, pch = 16, main = "mpg ~ wt")
for (j in 1:ncol(multi_rqfit$coefficients)) {
abline(coef(multi_rqfit)[, j], col = colors[j])
}
library(quantreg)
data(mtcars)
force(mtcars)
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(wt = seq_wt), interval = "confidence")
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
multi_rqfit <-rq(logtss ~ logdischarge, data = data, tau = seq(0, 1, by = 0.1))
plot(multi_rqfit)
colors <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333",
"#ff0000", "#cc0000", "#b30000", "#800000", "#4d0000", "#000000")
plot(logTSS ~ logdischarge, data = data, pch = 16, main = "mpg ~ wt")
colors <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333",
"#ff0000", "#cc0000", "#b30000", "#800000", "#4d0000", "#000000")
plot(logtss ~ logdischarge, data = data, pch = 16, main = "mpg ~ wt")
for (j in 1:ncol(multi_rqfit$coefficients)) {
abline(coef(multi_rqfit)[, j], col = colors[j])
}
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(wt = seq_wt), interval = "confidence")
a= data.frame(wt = seq_wt)
View(a)
View(a)
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(logdischarge = seq_wt), interval = "confidence")
cdf <- ecdf(pred[, 1])
plot(cdf, main = "Cumulative Distribution Function", xlab = "mpg", ylab = "Probability")
library(quantreg)
data(mtcars)
fit <- rq(mpg ~ wt, tau = seq(0.1, 0.9, 0.1), data = mtcars)
seq_wt <- seq(min(mtcars$wt), max(mtcars$wt), length.out = 100)
pred <- predict(fit, newdata = data.frame(wt = seq_wt), interval = "confidence")
cdf <- ecdf(pred[, 1])
plot(cdf, main = "Cumulative Distribution Function", xlab = "mpg", ylab = "Probability")
cdf
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(logdischarge = seq_wt), interval = "confidence")
cdf <- ecdf(pred[, 1])
pred
View(pred)
View(pred)
pred[, 1]
View(pred)
View(pred)
Fn(cdf)
cdf
is(cdf)
type(cdf)
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(logdischarge = seq_wt), interval = "confidence")
cdf <- ecdf(pred[, 1])
plot(cdf, main = "Cumulative Distribution Function", xlab = "mpg", ylab = "Probability")
cdf[0]
cdf(0.0)
cdf(0,0)
cdf(0.4)
cdf(0.8)
a=data.frame(ecdf(pred[, 1]))
plot(cdf, main = "Cumulative Distribution Function", xlab = "mpg", ylab = "Probability")
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 5)
pred <- predict(multi_rqfit, newdata = data.frame(logdischarge = seq_wt), interval = "confidence")
cdf <- ecdf(pred[, 1])
plot(cdf, main = "Cumulative Distribution Function", xlab = "mpg", ylab = "Probability")
plot( ecdf(pred[, 1]))
plot( ecdf(pred[, 2]))
plot( ecdf(pred[, 6]))
plot( ecdf(pred[, 1]),type='p')
plot( ecdf(pred[, 1]),type='p')
plot( ecdf(pred[, 6]),type="l")
plot( ecdf(pred[, 6]),type="l")
plot( ecdf(pred[, 6]))
plot( ecdf(pred[, 6]))
plot( ecdf(pred[, 11]))
plot( ecdf(pred[,122]))
View(pred)
View(pred)
View(pred)
View(pred)
plot(pred)
colors <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333",
"#ff0000", "#cc0000", "#b30000", "#800000", "#4d0000", "#000000")
plot(logtss ~ logdischarge, data = data, pch = 16, main = "mpg ~ wt")
for (j in 1:ncol(multi_rqfit$coefficients)) {
abline(coef(multi_rqfit)[, j], col = colors[j])
}
View(data)
View(data)
seq_wt <- seq(min(data$logtss), max(data$logtss), length.out = 100)
pred <- predict(multi_rqfit, newdata = data.frame(logdischarge = seq_wt), interval = "confidence")
View(pred)
View(pred)
seq_wt
View(pred)
View(pred)
library(dplyr)
library(reshape2)
library(ggplot2)
library(rstatix)
# get the data
setwd("X:/GitHub/NahalalWaterQualityArticle/r_test")
print(getwd())
##open_close_dam
data_dam <-read.csv("open_close_dam.csv")
data_filter_dam=filter(data_dam,element=='P-PO4' & id==11)
View(data_dam)
View(data_dam)
a=t.test(conc ~ open_dam,data=data_filter_dam,alternative='greater', var.equal = FALSE)
a
aa=data_dam  %>% group_by(element,id) %>%
summarise(mean_close=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$estimate[1],
mean_open=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$estimate[2],
statistic=t.test(conc ~ open_dam,alternative='greater', var.equal = FALSE)$statistic,
parameter=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$parameter,
p_value=t.test(conc ~ open_dam,alternative='greater', var.equal = FALSE)$p.value)
aa=arrange(aa, element, id)
write.csv(aa,'open_close_dam_ttest.csv', row.names = FALSE)
data_StreamSection <-read.csv("analysisByStreamSection.csv")
data_filter_StreamSection=filter(data_StreamSection,element=='Cl')
aa=data_StreamSection  %>% group_by(element,stream_section) %>%
summarise(avg = mean(conc))
aa=dcast(aa, element ~stream_section , value.var = 'avg')
bb=data_StreamSection  %>% group_by(element) %>%
summarise(F_value=summary(aov(conc ~ stream_section))[[1]]$`F value`[1],
p_value=summary(aov(conc ~ stream_section))[[1]]$`Pr(>F)`[1])
cc= merge(aa,bb,by ='element', all = T, sort = T)
write.csv(cc,'ByStreamSection_anova_test.csv', row.names = FALSE)
aa=data_StreamSection  %>% group_by(element,stream_section) %>%
summarise(avg = mean(conc))
aa=dcast(aa, element ~stream_section , value.var = 'avg')
bb=data_StreamSection  %>% group_by(element) %>%
summarise(F_value=summary(aov(conc ~ stream_section))[[1]]$`F value`[1],
p_value=summary(aov(conc ~ stream_section))[[1]]$`Pr(>F)`[1])
cc= merge(aa,bb,by ='element', all = T, sort = T)
write.csv(cc,'ByStreamSection_anova_test.csv', row.names = FALSE)
aa=data_dam  %>% group_by(element,id) %>%
summarise(mean_close=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$estimate[1],
mean_open=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$estimate[2],
statistic=t.test(conc ~ open_dam,alternative='greater', var.equal = FALSE)$statistic,
parameter=t.test(conc ~ open_dam,alternative='greater' ,var.equal = FALSE)$parameter,
p_value=t.test(conc ~ open_dam,alternative='greater', var.equal = FALSE)$p.value)
aa=arrange(aa, element, id)
write.csv(aa,'open_close_dam_ttest.csv', row.names = FALSE)
#### analysisByStreamSection ####
data_StreamSection <-read.csv("analysisByStreamSection.csv")
data_filter_StreamSection=filter(data_StreamSection,element=='Cl')
a=data_filter_StreamSection%>% group_by(stream_section)%>%
summarise(avg = mean(conc))
b <-aov(data =data_filter_StreamSection , formula =conc ~ stream_section) # type 3 SS should be used in ANCOVA
summary(b)[[1]]$`Pr(>F)`[1]
b2=TukeyHSD(b)
plot(b2)
aa=data_StreamSection  %>% group_by(element,stream_section) %>%
summarise(avg = mean(conc))
aa=dcast(aa, element ~stream_section , value.var = 'avg')
bb=data_StreamSection  %>% group_by(element) %>%
summarise(F_value=summary(aov(conc ~ stream_section))[[1]]$`F value`[1],
p_value=summary(aov(conc ~ stream_section))[[1]]$`Pr(>F)`[1])
cc= merge(aa,bb,by ='element', all = T, sort = T)
write.csv(cc,'ByStreamSection_anova_test.csv', row.names = FALSE)
tu_df=data.frame()
for (e in c("Cl","EC","N-NH4","N-NO2","N-NO3","P-PO4")){
print(e)
df_StreamSection=filter(data_StreamSection,element==e)
an=aov(data =df_StreamSection , formula =conc ~ stream_section)
tu=data.frame(TukeyHSD(an)$stream_section)
tu$element =e
tu_df = rbind(tu_df,tu)
}
write.csv(tu_df,'ByStreamSection_post_hoc_test.csv', row.names = FALSE)
for (e in c("Cl","EC","N-NH4","N-NO2","N-NO3","P-PO4")){
print(e)
df_StreamSection=filter(data_StreamSection,element==e)
ee<- emmeans_test(data =df_StreamSection, formula =conc ~ stream_section, p.adjust.method ="bonferroni" )
ee$element =e
ee=select(ee, element,group1,group2,p.adj,p.adj.signif)
dd = rbind(dd,ee)
}
dd=data.frame()
for (e in c("Cl","EC","N-NH4","N-NO2","N-NO3","P-PO4")){
print(e)
df_StreamSection=filter(data_StreamSection,element==e)
ee<- emmeans_test(data =df_StreamSection, formula =conc ~ stream_section, p.adjust.method ="bonferroni" )
ee$element =e
ee=select(ee, element,group1,group2,p.adj,p.adj.signif)
dd = rbind(dd,ee)
}
write.csv(dd,'ByStreamSection_post_hoc_test.csv', row.names = FALSE)
dataSPI <-read.csv("bySectionSPI.csv")
#anova
aa=dataSPI  %>% group_by(element,spi_group) %>%
summarise(avg = mean(conc))
aa=dcast(aa, element ~spi_group , value.var = 'avg')
bb=dataSPI  %>% group_by(element) %>%
summarise(F_value=summary(aov(conc ~ spi_group))[[1]]$`F value`[1],
p_value=summary(aov(conc ~ spi_group))[[1]]$`Pr(>F)`[1])
cc= merge(aa,bb,by ='element', all = T, sort = T)
write.csv(cc,'bySectionSPI_anova_test.csv', row.names = FALSE)
dd=data.frame()
for (e in c("Cl","EC","N-NH4","N-NO2","N-NO3","P-PO4")){
print(e)
df_SPI=filter(dataSPI,element==e)
ee<- emmeans_test(data =df_SPI, formula =conc ~spi_group , p.adjust.method ="bonferroni" )
ee$element =e
#ee=select(ee, element,group1,group2,p.adj,p.adj.signif)
dd = rbind(dd,ee)
}
write.csv(dd,'bySectionSPI_post_hoc_test.csv', row.names = FALSE)
############# interaction effect ##########################
b1 <-aov(data =dataSPI_filter , formula =conc ~ stream_section*spi_group)
interaction_df=data.frame()
for (e in c("Cl","EC","N-NH4","N-NO2","N-NO3","P-PO4")){
print(e)
df_SPI=filter(dataSPI,element==e)
b1 <-aov(data =df_SPI , formula =conc ~ stream_section*spi_group)
s1=summary(b1)[[1]]
s1=s1[!(row.names(s1) %in% c("Residuals               ")),]
s1$element =e
s1=select(s1, element, 'F value', 'Pr(>F)')
interaction_df = rbind(interaction_df,s1)}
View(interaction_df)
View(interaction_df)
write.csv(interaction_df,'interaction effect.csv', row.names = FALSE)
View(interaction_df)
write.csv(interaction_df,'interaction effect.csv', row.names = TRUE)
write.csv(interaction_df,'interaction effect.csv', row.names = TRUE)
