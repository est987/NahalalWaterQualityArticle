library(raster)
library(ggplot2)
library(car)
library(classInt)
library(RStoolbox)
library(caret)
library(caretEnsemble)
library(doParallel)
library(gridExtra)
state<-shapefile(file.path(dataFolder,"GP_STATE.shp"))
View(state)
View(state)
######Load Data####
# Define data folder
dataFolder<-"C:/Users/matanb/OneDrive - ARO Volcani Center/RUAEL/regression kriging/R/Sample data/DATA_08"
train<- read.csv(file.path(dataFolder,"train_data.csv"),header= TRUE)
state<-shapefile(file.path(dataFolder,"GP_STATE.shp"))
grid<-read.csv(file.path(dataFolder, "GP_prediction_grid_data.csv"), header= TRUE)
powerTransform(train$SOC)
View(train)
View(train)
install.packages(c("car", "caret", "caretEnsemble", "classInt", "doParallel", "gridExtra", "gstat", "RStoolbox"))
install.packages(c("car", "caret", "caretEnsemble", "classInt", "doParallel", "gridExtra", "gstat", "RStoolbox"))
library(plyr)
library(gstat)
library(raster)
library(ggplot2)
library(car)
library(classInt)
library(RStoolbox)
library(caret)
library(caretEnsemble)
library(doParallel)
library(gridExtra)
install.packages("gstat")
library(gstat)####
install.packages("car")
options("install.lock"=FALSE)
install.packages("car")
library(car)####
install.packages("gstat")
library(gstat)
install.packages("classInt")
library(classInt)
library(RStoolbox)########
powerTransform(train$SOC)
View(train)
View(train)
View(state)
View(state)
View(grid)
View(grid)
View(train)
View(train)
options("install.lock"=FALSE)
install.packages("RStoolbox")
library(RStoolbox)
library(caret)######
library(caretEnsemble)########
install.packages("caretEnsemble")
library(caretEnsemble)
a
library(tidyverse)
library(dataRetrieval)
library(tidyverse)
library(tidyverse)
library(dataRetrieval)
library(tidyverse)
theme_set(theme_classic())
# get the data
data<- read.csv(file = 'C:\Users\matanb\OneDrive - ARO Volcani Center\forntiers water\flood frequency analysis\csv_data\aa.csv')
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
View(data)
View(data)
ggplot(data, aes(peak_dt, peak_va))+
geom_point()
View(data)
View(data)
View(data)
View(data)
#plot the data
ggplot(data, aes(hy_year, anual_max_discharge))+
geom_point()
data<- data %>%
mutate(ranks = rank(-anual_max_discharge)) %>%
select(hy_year, anual_max_discharge , ranks)
View(data)
View(data)
select(hy_year, anual_max_discharge , ranks)
#look at it
ggplot(data,
aes(hy_year,anual_max_discharge , color = ranks))+
geom_point()
#look at it
ggplot(data,
aes(hy_year,anual_max_discharge , color = ranks))+
geom_point()
View(data)
View(data)
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
View(data)
data <- sort(data$anual_max_discharge)
data
data2 <-data[order(data$anual_max_discharge)]
A <- data$anual_max_discharge
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
data2 <-data[order(data$anual_max_discharge)]
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
#sort the data
data2 <-data[order(data$anual_max_discharge)]
data$anual_max_discharge
data2 <-data[order(data$anual_max_discharge),]
View(data2)
View(data2)
View(data)
View(data)
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
data <-data[order(data$anual_max_discharge),]
data<- data %>%
mutate(ranks = rank(-anual_max_discharge)) %>%
select(hy_year, anual_max_discharge , ranks)
View(data)
#look at it
ggplot(data,
aes(hy_year,anual_max_discharge , color = ranks))+
geom_point()
N <- length(data$hy_year)
a <- 0.44
מ
N
ש
a
data <- data %>%
mutate(qi = (ranks - a) / (N + 1 - (2*a))) %>%
mutate(pi = 1 - qi) %>%
mutate(TpEst = 1 / (1-pi))
View(data)
View(data)
data %>%
ggplot(aes(x = TpEst, y = peak_va)) +
geom_point()
data %>%
ggplot(aes(x = TpEst, y =anual_max_discharge)) +
geom_point()
xbar <- mean(data$anual_max_discharge)
sx <- sd(data$anual_max_discharge)
alpha <- (sqrt(6)*sx) / pi
u <- xbar - (0.5772 * alpha)
data %>% ggplot(aes(x = TpEst, y =anual_max_discharge , color = "Estimated")) +
geom_point()+
geom_point(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
theme_classic()
data <- data %>%
mutate(pTheoretical =
exp(-exp(-((peak_va - u) / alpha)))) %>%
mutate(TpTheoretical = (1 / (1-pTheoretical)))
data <- data %>%
mutate(pTheoretical =
exp(-exp(-((anual_max_discharge - u) / alpha)))) %>%
mutate(TpTheoretical = (1 / (1-pTheoretical)))
data %>% ggplot(aes(x = TpEst, y =anual_max_discharge , color = "Estimated")) +
geom_point()+
geom_point(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
theme_classic()
peakflows %>% ggplot(aes(x = TpEst, y =anual_max_discharge, color = "Estimated")) +
geom_point()+
geom_line(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
scale_x_log10(limits = c(1,100))+
theme_classic()
data %>% ggplot(aes(x = TpEst, y =anual_max_discharge, color = "Estimated")) +
geom_point()+
geom_line(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
scale_x_log10(limits = c(1,100))+
theme_classic()
Tp = 100
p = 1 - (1/Tp)
peak_va = u - (alpha * log(-log(p)))
peak_va
View(data)
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
library(tidyverse)
#plot the data
ggplot(data, aes(hy_year, anual_max_discharge))+
geom_point()
#then clean it up, pull out only peak value, date, rank
data<- data %>%
mutate(ranks = rank(-anual_max_discharge)) %>%
select(hy_year, anual_max_discharge , ranks)
library(tidyverse)
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
#plot the data
ggplot(data, aes(hy_year, anual_max_discharge))+
geom_point()
#sort the data
data <-data[order(data$anual_max_discharge),]
library(tidyverse)
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
library(tidyverse)
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
library(tidyverse)
# get the data
data<- read.csv(file = 'C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/flood frequency analysis/csv_data/aa.csv')
library(tidyverse)
# get the data
data<- read.csv(file ='C:/Users/matanb/OneDrive - ARO Volcani Center/forntiers water/Tasks/flood frequency analysis/csv_data/aa.csv' )
#plot the data
ggplot(data, aes(hy_year, anual_max_discharge))+
geom_point()
#sort the data
data <-data[order(data$anual_max_discharge),]
View(data)
data<- data %>%
mutate(ranks = rank(-anual_max_discharge)) %>%
select(hy_year, anual_max_discharge , ranks)
View(data)
View(data)
View(data)
data <- data %>%
mutate(qi = (ranks - a) / (N + 1 - (2*a))) %>%
mutate(pi = 1 - qi) %>%
mutate(TpEst = 1 / (1-pi))
#Plot peak flows on y and est return period on the x
data %>%
ggplot(aes(x = TpEst, y =anual_max_discharge)) +
geom_point()
View(data)
View(data)
data <- data %>%
mutate(qi = (ranks - a) / (N + 1 - (2*a))) %>%
mutate(pi = 1 - qi) %>%
mutate(TpEst = 1 / (1-pi))
N <- length(data$hy_year)
a <- 0.44
#calculate exceedence/non-exceedence with gringorten and return period
data <- data %>%
mutate(qi = (ranks - a) / (N + 1 - (2*a))) %>%
mutate(pi = 1 - qi) %>%
mutate(TpEst = 1 / (1-pi))
View(data)
View(data)
View(data)
View(data)
xbar <- mean(data$anual_max_discharge)
xbar
sx
sx <- sd(data$anual_max_discharge)
sx
p1
pi
alpha <- (sqrt(6)*sx) / pi
alpha
u <- xbar - (0.5772 * alpha)
u
View(data)
View(data)
data <- data %>%
mutate(pTheoretical =
exp(-exp(-((anual_max_discharge - u) / alpha)))) %>%
mutate(TpTheoretical = (1 / (1-pTheoretical)))
View(data)
View(data)
exp(1)
exp(2)
View(data)
View(data)
data %>% ggplot(aes(x = TpEst, y =anual_max_discharge , color = "Estimated")) +
geom_point()+
geom_point(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
theme_classic()
data %>% ggplot(aes(x = TpEst, y =anual_max_discharge, color = "Estimated")) +
geom_point()+
geom_line(aes(x = TpTheoretical, y =anual_max_discharge, color = "Theoretical"))+
ylab("Annual Peak Flows")+
xlab("Return Period")+
scale_x_log10(limits = c(1,100))+
theme_classic()
# 1 in 100 chance flood
Tp = 100
p = 1 - (1/Tp)
peak_va = u - (alpha * log(-log(p)))
p
peak_va
Tp = 10
p = 1 - (1/Tp)
peak_va = u - (alpha * log(-log(p)))
peak_va
# 1 in 100 chance flood
Tp = 100
p = 1 - (1/Tp)
peak_va = u - (alpha * log(-log(p)))
# 1 in 100 chance flood
Tp = 100
p = 1 - (1/Tp)
peak_va
df=read_csv("https://reneshbedre.github.io/assets/posts/ancova/ancova_data.csv")
head(df, 2)
library(tidyverse)
df=read_csv("https://reneshbedre.github.io/assets/posts/ancova/ancova_data.csv")
library(tidyverse)
install.packages("lifecycle")
library(tidyverse)
install.packages("lifecycle")
library(tidyverse)
df=read_csv("https://reneshbedre.github.io/assets/posts/ancova/ancova_data.csv")
library(gridExtra)
library(rstatix)
install.packages("broom")
library(gridExtra)
library(rstatix)
install.packages("broom", lib="C:/Users/matanb/Anaconda3/envs/rstudio/lib/R/library")
library(rstatix)
library(dplyr)
library(gridExtra)
library(dplyr)
install.packages("lifecycle")
library(dplyr)
library(lifecycle)
q()
# my  data
# get the data
setwd("C:/Users/matanb/OneDrive - ARO Volcani Center/Water Quality Measurements nahalal/python")
print(getwd())
data <-read.csv("poll_data_join_rain.csv")
data<- data%>% filter(spi_grop!='wet2dry5')
library(tidyverse)
library(datarium)
library(lifecycle)
library(rstatix)
library(gridExtra)
library(janitor)
library(emmeans)
library(tidyverse)
library(rstatix)
library(broom)
library(readr)
# my  data
# get the data
setwd("C:/Users/matanb/OneDrive - ARO Volcani Center/Water Quality Measurements nahalal/python")
print(getwd())
data <-read.csv("poll_data_join_rain.csv")
data<- data%>% filter(spi_grop!='wet2dry5')
coluem_name <- colnames(data)
poll_list <-coluem_name[! coluem_name %in% c('X','id','id_grop','spi_grop','grop')]
View(data)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(multcompView)
library(tidyverse)
library(tidyverse)
library(datarium)
library(lifecycle)
library(rstatix)
library(gridExtra)
library(janitor)
library(emmeans)
library(tidyverse)
library(rstatix)
library(broom)
library(readr)
library(ggpubr)
library(gsubfn)
ANCOVA_function <- function(data,pool,path){
if (file.exists(file.path(path,pool))) stop(file.path(path,pool), " already exists")
dir.create(paste0(file.path(path,pool)), showWarnings = FALSE)
data_pool <-data %>%select(id,id_grop,spi_grop,grop,pool)
data_pool <- na.omit(data_pool)
data_pool$id <- as.factor(data_pool$id)
names(data_pool)[names(data_pool) ==pool ] <-'poll'
#perform one-way ANCOVA
a_ANCOVA <- anova_test(data =data_pool  , formula =  poll~id*spi_grop , type = 2, detailed = TRUE) # type 3 SS should be used in ANCOV
b_ANCOVA <- anova_test(data =  data_pool, formula = poll ~id_grop*spi_grop , type = 2, detailed = TRUE) # type 3 SS should be used in ANCOVA
c_ANCOVA <- anova_test(data =  data_pool, formula = poll ~grop , type = 2, detailed = TRUE) # type 3 SS should be used in ANCOVA
# save to csv
write.csv(a_ANCOVA,file.path(path,pool,'ANCOVA_id.csv'), row.names = FALSE)
write.csv(b_ANCOVA,file.path(path,pool,'ANCOVA_id_grop.csv'), row.names = FALSE)
write.csv(c_ANCOVA,file.path(path,pool,'ANCOVA_grop.csv'), row.names = FALSE)
#post-hoc test
a_post_hoc <- emmeans_test(data = data_pool, formula =poll ~id, p.adjust.method ="bonferroni" )
b_post_hoc <- emmeans_test(data = data_pool, formula =poll ~id_grop, p.adjust.method ="bonferroni" )
c_post_hoc<- emmeans_test(data = data_pool, formula =poll ~spi_grop, p.adjust.method ="bonferroni")
d_post_hoc<- emmeans_test(data = data_pool, formula =poll ~grop, p.adjust.method ="bonferroni")
a_post_hoc_emmeans <-get_emmeans(a_post_hoc)
b_post_hoc_emmeans <-get_emmeans(b_post_hoc)
c_post_hoc_emmeans <-get_emmeans(c_post_hoc)
d_post_hoc_emmeans <-get_emmeans(d_post_hoc)
write.csv(a_post_hoc,file.path(path,pool,'post_hoc_id.csv'), row.names = FALSE)
write.csv(b_post_hoc,file.path(path,pool,'post_hoc_id_grop.csv'), row.names = FALSE)
write.csv(c_post_hoc,file.path(path,pool,'post_hoc_spi_grop.csv'), row.names = FALSE)
write.csv(d_post_hoc,file.path(path,pool,'post_hoc_grop.csv'), row.names = FALSE)
# Visualization: line plots with p-values
a_post_hoc<- a_post_hoc %>% add_xy_position(x = "id", fun = "mean_se")
ggline_a <- ggline(get_emmeans(a_post_hoc), x = "id", y ="emmean" ) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(a_post_hoc, hide.ns = TRUE, tip.length = FALSE)+
ylab(pool)
ggsave("line_id.png", ggline_a , path=file.path(path,pool))
b_post_hoc<- b_post_hoc %>% add_xy_position(x = "id_grop", fun = "mean_se")
ggline_b <- ggline(get_emmeans(b_post_hoc), x = "id_grop", y ="emmean" ) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(b_post_hoc, hide.ns = TRUE, tip.length = FALSE)+
ylab(pool)
ggsave("line_id_grop.png", ggline_b , path=file.path(path,pool) )
c_post_hoc<- c_post_hoc %>% add_xy_position(x = "spi_grop", fun = "mean_se")
ggline_3 <- ggline(get_emmeans(c_post_hoc), x = "spi_grop", y ="emmean" ) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(c_post_hoc, hide.ns = TRUE, tip.length = FALSE)+
ylab(pool)
ggsave("line_spi_grop.png", ggline_3 , path =file.path(path,pool))
d_post_hoc<- d_post_hoc %>% add_xy_position(x = "grop", fun = "mean_se")
ggline_4 <- ggline(get_emmeans(d_post_hoc), x = "grop", y ="emmean" ) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(d_post_hoc, hide.ns = TRUE, tip.length = FALSE)+
ylab(pool)
ggsave("line_grop.png", ggline_4 , path =file.path(path,pool))
#Summary statistics and visualization of dataset
a_Summary_statistics <- data_pool %>% group_by(id) %>%  get_summary_stats(poll, type="common")
a_post_hoc$Comparison <-c(paste(a_post_hoc$group1,a_post_hoc$group2 , sep='-'))
PT <- a_post_hoc$p.adj
names(PT) =a_post_hoc$Comparison
PT <- multcompLetters(PT)
a_Summary_statistics$later_grop <- PT$Letters
b_Summary_statistics <- data_pool %>% group_by(id_grop) %>%  get_summary_stats(poll, type="common")
b_post_hoc$Comparison <-c(paste(b_post_hoc$group1,b_post_hoc$group2 , sep='-'))
PT <- b_post_hoc$p.adj
names(PT) =b_post_hoc$Comparison
PT <- multcompLetters(PT)
b_Summary_statistics$later_grop <- PT$Letters
c_Summary_statistics <- data_pool %>% group_by(spi_grop) %>%  get_summary_stats(poll, type="common")
c_post_hoc$Comparison <-c(paste(c_post_hoc$group1,c_post_hoc$group2 , sep='-'))
PT <- c_post_hoc$p.adj
names(PT) =c_post_hoc$Comparison
PT <- multcompLetters(PT)
c_Summary_statistics$later_grop <- PT$Letters
d_Summary_statistics <- data_pool %>% group_by(grop) %>%  get_summary_stats(poll, type="common")
d_post_hoc$Comparison <-c(paste(d_post_hoc$group1,d_post_hoc$group2 , sep='-'))
PT <- d_post_hoc$p.adj
names(PT) =d_post_hoc$Comparison
PT <- multcompLetters(PT)
d_Summary_statistics$later_grop <- PT$Letters
e_Summary_statistics <- data_pool %>% group_by(id_grop,spi_grop) %>%  get_summary_stats(poll, type="common")
f_Summary_statistics <- data_pool %>% group_by(id,spi_grop) %>%  get_summary_stats(poll, type="common")
#line_plot
line_plot_a <-ggplot(a_Summary_statistics , aes(id, mean,group=1))+geom_line(size = 3)+ geom_point(size = 3)+theme(legend.position="right")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)+
geom_text(aes(label=later_grop), nudge_x =0, nudge_y =0,colour='red', size = 10)+
ylab(pool)
ggsave("line_id_2.png",  line_plot_a , path =file.path(path,pool))
line_plot_b <-ggplot(b_Summary_statistics , aes(id_grop, mean,group=1))+geom_line(size = 3)+ geom_point(size = 3)+theme(legend.position="right")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)+
geom_text(aes(label=later_grop), nudge_x =0, nudge_y = 0,colour='red', size = 10)+
ylab(pool)
ggsave("line_id_grop_2.png",  line_plot_b , path =file.path(path,pool))
line_plot_c <-ggplot(c_Summary_statistics , aes(spi_grop, mean,group=1))+geom_line(size = 3)+ geom_point(size = 3)+theme(legend.position="right")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)+
geom_text(aes(label=later_grop), nudge_x =0, nudge_y = 0,colour='red', size = 10)+
ylab(pool)
ggsave("line_spi_grop_2.png",  line_plot_c , path =file.path(path,pool))
line_plot_d <-ggplot(d_Summary_statistics , aes(grop, mean,group=1))+geom_line(size = 3)+ geom_point(size = 3)+theme(legend.position="right")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)+
geom_text(aes(label=later_grop), nudge_x =0, nudge_y =0,colour='red', size = 10)+
ylab(pool)
ggsave("line_grop_2.png",  line_plot_d , path =file.path(path,pool))
#geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)
line_plot_e <- ggplot(e_Summary_statistics , aes(id_grop, mean, colour =spi_grop, group=spi_grop))+geom_line(size = 3)+geom_point(size = 5,colour ="black")+theme(legend.position="right")+
ylab(pool)
ggsave("aa.png",  line_plot_e , path =file.path(path,pool))
line_plot_f <-ggplot(f_Summary_statistics, aes(id, mean, colour =spi_grop, group=spi_grop))+geom_line(size = 3)+geom_point(size = 5,colour ="black")+theme(legend.position="right")+
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.2)+
ylab(pool)
ggsave("bb.png",  line_plot_f , path=file.path(path,pool) )
write.csv(a_post_hoc_emmeans,file.path(path,pool,'post_hoc_emmeans_id.csv'), row.names = FALSE)
write.csv(b_post_hoc_emmeans,file.path(path,pool,'post_hoc_emmeans_id_grop.csv'), row.names = FALSE)
write.csv(c_post_hoc_emmeans,file.path(path,pool,'post_hoc_emmeans_spi_grop.csv'), row.names = FALSE)
write.csv(d_post_hoc_emmeans,file.path(path,pool,'post_hoc_emmeans_grop.csv'), row.names = FALSE)
write.csv(a_Summary_statistics,file.path(path,pool,'Summary_statistics_id.csv'), row.names = FALSE)
write.csv(b_Summary_statistics,file.path(path,pool,'Summary_statistics_id_grop.csv'), row.names = FALSE)
write.csv(c_Summary_statistics,file.path(path,pool,'Summary_statistics_spi_grop.csv'), row.names = FALSE)
write.csv(d_Summary_statistics,file.path(path,pool,'Summary_statistics_grop.csv'), row.names = FALSE)
return  ()
}
################################################################################################
# my  data
# get the data
setwd("X:/GitHub/NahalalWaterQualityArticle/data")
print(getwd())
data <-read.csv("poll_data_join_rain.csv")
data<- data%>% filter(spi_grop!='wet2dry5')
coluem_name <- colnames(data)
poll_list <-coluem_name[! coluem_name %in% c('X','id','id_grop','spi_grop','grop')]
path="X:/GitHub/NahalalWaterQualityArticle/r_ancova"
for (item in poll_list) {
print(item)
A  <- ANCOVA_function(data,item,path)
}
